<?php

namespace AppBundle\Repository\Battle;

/**
 * BattleRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BattleRepository extends \Doctrine\ORM\EntityRepository
{
    public function findBattlesPast()
    {
        $qb = $this->createQueryBuilder('b');

        $qb->leftJoin('b.participants', 'p')
       ->addSelect('p')
       ->leftJoin('p.participant', 'u')
       ->addSelect('u')
       ->leftJoin('p.presence', 'pr')
       ->addSelect('pr')
       ->where('b.date < :date')
       ->setParameter('date', new \Datetime())
       ->andWhere('b.canceled = false')
       ->orderBy('b.date', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function findOneFuture()
    {
        $qb = $this->createQueryBuilder('b');

        $qb->leftJoin('b.participants', 'p')
       ->addSelect('p')
       ->leftJoin('p.participant', 'u')
       ->addSelect('u')
       ->leftJoin('p.presence', 'pr')
       ->addSelect('pr')
       ->where('b.date > :date')
       ->setParameter('date', new \Datetime())
       ->orderBy('b.date', 'ASC')
       ->setMaxResults(1);

        return $qb->getQuery()->getSingleResult();
    }
    public function findLastOne()
    {
        $qb = $this->createQueryBuilder('b');

        $qb->leftJoin('b.participants', 'p')
       ->addSelect('p')
       ->leftJoin('p.participant', 'u')
       ->addSelect('u')
       ->leftJoin('p.presence', 'pr')
       ->addSelect('pr')
       ->where('b.date < :date')
       ->setParameter('date', new \Datetime())
       ->orderBy('b.date', 'DESC')
       ->setMaxResults(1);

        return $qb->getQuery()->getSingleResult();
    }

    public function findBattlesFuture()
    {
        $qb = $this->createQueryBuilder('b');

        $qb->leftJoin('b.participants', 'p')
       ->addSelect('p')
       ->leftJoin('p.participant', 'u')
       ->addSelect('u')
       ->leftJoin('p.presence', 'pr')
       ->addSelect('pr')
       ->where('b.date > :date')
       ->setParameter('date', new \Datetime())
       ->orderBy('b.date', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function findAllOfVisitor($user)
    {
        $qb = $this->createQueryBuilder('b');

        $qb->innerJoin('b.participants', 'p')
            ->where('p.participant = :participant')
            ->setParameter('participant', $user)
            ->andWhere('p.presence = :presence')
            ->setParameter('presence', 3)
            ->orderBy('b.date', 'DESC');

        return $qb->getQuery()->getResult();
    }
}
