<?php

namespace AppBundle\Entity\Army;

use Doctrine\ORM\Mapping as ORM;

/**
 * UnitArmy.
 *
 * @ORM\Table(name="unit_army")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\Army\UnitArmyRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class UnitArmy
{
    /**
     * @ORM\Column(type="guid")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="UUID")
     */
    private $id;

    /**
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Unit\Unit")
     * @ORM\JoinColumn(nullable=false)
     */
    private $unit;

    /**
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Army\Army", inversedBy="units")
     * @ORM\JoinColumn(nullable=false)
     */
    private $army;

    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\Army\FigurineArmy", mappedBy="unit", cascade={"all"})
     */
    protected $figurines;

    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\Army\PhotoUnit", mappedBy="unit", cascade={"all"})
     */
    private $photos;

    /**
     * @ORM\Column(name="points", type="integer", nullable = true)
     */
    private $points;

    /**
     * Constructor.
     */
    public function __construct()
    {
        $this->equipements = new \Doctrine\Common\Collections\ArrayCollection();
        $this->photos = new \Doctrine\Common\Collections\ArrayCollection();
    }

    public function __toString()
    {
        return $this->unit->getName();
    }

    /**
     * @ORM\PrePersist
     * @ORM\PreUpdate
     */
    public function countPoints()
    {

        // On créer une vartiable points valnt les points de la unit + les points d'équipements
        $points = 0;
        foreach ($this->equipements as $equipement) {
            $points = $points + $equipement->getPoints();
        }

        // On calcule les nouveaux points de l'armée en lui ajoutant la difference des points - les points de la unitarmée

        $this->points = $points;
    }

    /**
     * @ORM\PreRemove
     */
    public function countArmy()
    {
        // On compte les points de l'armée sans ceux de la unit armé
    }

}
