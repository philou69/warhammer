<?php

namespace AppBundle\Entity\Army;

use Doctrine\ORM\Mapping as ORM;

/**
 * UnitArmy.
 *
 * @ORM\Table(name="unit_army")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\Army\UnitArmyRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class UnitArmy
{
    /**
     * @ORM\Column(type="guid")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="UUID")
     */
    private $id;

    /**
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Unit\Unit")
     * @ORM\JoinColumn(nullable=false)
     */
    private $unit;

    /**
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Army\Army", inversedBy="units")
     * @ORM\JoinColumn(nullable=false)
     */
    private $army;

    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\Army\FigurineArmy", mappedBy="unit", cascade={"all"})
     */
    protected $figurines;

    /**
     * @ORM\OneToOne(targetEntity="AppBundle\Entity\Army\PhotoUnit", mappedBy="unit", cascade={"all"})
     */
    private $photo;

    /**
     * @ORM\Column(name="points", type="integer", nullable = true)
     */
    private $points;

    public function __toString()
    {
        return $this->unit->getName();
    }

    /**
     * @ORM\PrePersist
     * @ORM\PreUpdate
     */
    public function countPoints()
    {

        // On créer une vartiable points valnt les points de la unit + les points d'équipements
        $points = 0;

        // On calcule les nouveaux points de l'armée en lui ajoutant la difference des points - les points de la unitarmée

        $this->points = $points;
    }

    /**
     * @ORM\PreRemove
     */
    public function countArmy()
    {
        // On compte les points de l'armée sans ceux de la unit armé
    }


    /**
     * Get id
     *
     * @return guid
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set points
     *
     * @param integer $points
     *
     * @return UnitArmy
     */
    public function setPoints($points)
    {
        $this->points = $points;

        return $this;
    }

    /**
     * Get points
     *
     * @return integer
     */
    public function getPoints()
    {
        return $this->points;
    }

    /**
     * Set unit
     *
     * @param \AppBundle\Entity\Unit\Unit $unit
     *
     * @return UnitArmy
     */
    public function setUnit(\AppBundle\Entity\Unit\Unit $unit)
    {
        $this->unit = $unit;

        return $this;
    }

    /**
     * Get unit
     *
     * @return \AppBundle\Entity\Unit\Unit
     */
    public function getUnit()
    {
        return $this->unit;
    }

    /**
     * Set army
     *
     * @param \AppBundle\Entity\Army\Army $army
     *
     * @return UnitArmy
     */
    public function setArmy(\AppBundle\Entity\Army\Army $army)
    {
        $this->army = $army;

        return $this;
    }

    /**
     * Get army
     *
     * @return \AppBundle\Entity\Army\Army
     */
    public function getArmy()
    {
        return $this->army;
    }

    /**
     * Add figurine
     *
     * @param \AppBundle\Entity\Army\FigurineArmy $figurine
     *
     * @return UnitArmy
     */
    public function addFigurine(\AppBundle\Entity\Army\FigurineArmy $figurine)
    {
        $this->figurines[] = $figurine;
        $figurine->setUnit($this);
        return $this;
    }

    /**
     * Remove figurine
     *
     * @param \AppBundle\Entity\Army\FigurineArmy $figurine
     */
    public function removeFigurine(\AppBundle\Entity\Army\FigurineArmy $figurine)
    {
        $this->figurines->removeElement($figurine);
    }

    /**
     * Get figurines
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getFigurines()
    {
        return $this->figurines;
    }

}
